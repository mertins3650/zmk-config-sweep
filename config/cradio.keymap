// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH1 LH0 RH0 RH1 // thumbs

#define ___ &trans

#define DEF 0
#define SYM 1
#define EXT 2
#define SYS 3

ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(meh,
    flavor = "balanced";
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    hold-trigger-key-positions = <KEYS_L KEYS_R THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_CONDITIONAL_LAYER(bootlayer, SYM EXT, SYS)


ZMK_LAYER(default_layer,

        //╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮        ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
            &kp B         &kp L         &kp D         &kp W         &kp Z                  &kp DOT       &kp F         &kp U         &kp O         &kp J
        //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &kp N         &hml LGUI R   &kp T         &hml LCTRL S  &kp G                  &kp Y         &hmr LCTRL H  &kp E         &hmr LGUI A   &kp I
        //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &kp Q         &hml LALT X   &kp M         &kp C         &kp V                  &kp K         &kp P         &kp COMMA     &hmr LALT FSLH &kp ENTER
        //╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                      &lt EXT TAB   &meh LC(LS(LALT)) SPC  &kp LSHFT     &lt SYM BSPC
        //                                          ╰─────────────┴─────────────╯        ╰─────────────┴─────────────╯
)

ZMK_LAYER(symbols_layer,

        //╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮        ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
            &kp N1        &kp N2        &kp N3        &kp N4        &kp N5                 &kp N6        &kp N7        &kp N8        &kp N9        &kp N0
        //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &kp LS(N5)    &kp RA(N7)    &kp RA(N7)    &kp LS(N8)    &kp LS(N0)             &kp LS(N2)    &kp LS(N9)    &kp RA(N9)    &kp RA(N0)    &kp RA(N4)
        //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &kp NUBS      &kp LS(NUBS)  &kp RA(NUBS)  &kp AMPS      &kp RA(RBKT)           &kp BSLH      &kp LS(EQUAL) &kp RA(EQUAL)  &kp LS(BSLH) &kp MINUS
        //╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                      &kp LGUI     &LC(LGUI)               &kp ___     &kp ___
        //                                          ╰─────────────┴─────────────╯        ╰─────────────┴─────────────╯
)

ZMK_LAYER(extended_layer,

        //╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮        ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
            &kp ESC       &kp LALS      &kp LSHFT     &kp LC(TAB)   &kp TAB                &kp EXCL       &kp HOME     &kp END       &kp BC(BSPC)  &kp BSPC
        //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &kp RA(N3)    &kp LS(GRAVE) &kp RA(E)     &kp LS(RBKT)  &kp LS(N3)             &kp LEFT       &DOWN        &kp UP        &RIGHT        &kp PG_UP
        //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &kp LS(N6)    &LC(LALT)     &kp DEL       &kp LC(DEL)   &kp RA(N2)             &kp QMARK      &kp SEMI     &kp SQT       &LBKT         &kp PG_DOWN
        //╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤        ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                      &kp ___       &___                   &kp LSHFT     &LGUI
        //                                          ╰─────────────┴─────────────╯        ╰─────────────┴─────────────╯
)
